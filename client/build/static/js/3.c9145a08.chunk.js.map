{"version":3,"sources":["components/blog/AddPost.js"],"names":["AddPost","props","useContext","Context","user","dispatch","useState","touched","isValid","msg","titleValid","setTitleValid","bodyValid","setBodyValid","image","setImage","isLoading","setisLoading","addSuccess","setaddSuccess","isError","error","setError","refreshToken","a","axios","post","token","res","type","payload","accessToken","data","console","log","axiosJWT","create","interceptors","request","use","config","currentDate","Date","jwt_decode","exp","getTime","headers","err","Promise","reject","addPostHandler","e","preventDefault","formData","FormData","append","target","title","value","body","method","url","reset","window","location","replace","_id","response","status","md","lg","className","onSubmit","Group","Label","Control","placeholder","name","titleStyle","onBlur","val","trim","valids","length","autoFocus","controlId","as","rows","bodyStyle","onChange","xs","src","URL","createObjectURL","thumbnail","accept","files","variant","disabled"],"mappings":"sQAkPeA,UA5OC,SAACC,GAIf,MAA2BC,qBAAWC,KAA9BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAEd,EAAoCC,mBAAS,CAC3CC,SAAS,EACTC,SAAS,EACTC,IAAK,KAHP,mBAAOC,EAAP,KAAmBC,EAAnB,KAMA,EAAkCL,mBAAS,CACzCC,SAAS,EACTC,SAAS,EACTC,IAAK,KAHP,mBAAOG,EAAP,KAAkBC,EAAlB,KAMA,EAA0BP,mBAAS,MAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KAEA,EAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KAEA,EAAoCX,oBAAS,GAA7C,mBAAOY,EAAP,KAAmBC,EAAnB,KAEA,EAA0Bb,mBAAS,CACjCc,SAAS,EACTX,IAAK,KAFP,mBAAOY,EAAP,KAAcC,EAAd,KA6DMC,EAAY,uCAAG,4BAAAC,EAAA,+EAECC,IAAMC,KAAK,uBAAwB,CACnDC,MAAOvB,EAAKmB,eAHG,cAEXK,EAFW,OAKjBvB,EAAS,CACPwB,KAAM,gBACNC,QAAQ,2BAAM1B,GAAP,IAAa2B,YAAaH,EAAII,KAAKD,gBAP3B,kBASVH,EAAII,MATM,gCAWjBC,QAAQC,IAAR,MAXiB,yDAAH,qDAeZC,EAAWV,IAAMW,SAEvBD,EAASE,aAAaC,QAAQC,IAA9B,+BAAAf,EAAA,MACE,WAAOgB,GAAP,iBAAAhB,EAAA,yDACMiB,EAAc,IAAIC,OAEC,IADFC,YAAWvC,EAAK2B,aACpBa,IAAaH,EAAYI,WAH5C,gCAIuBtB,IAJvB,OAIUS,EAJV,OAKIQ,EAAOM,QAAQ,cAAgBd,EAAKD,YALxC,gCAOSS,GAPT,2CADF,uDAUE,SAACO,GACC,OAAOC,QAAQC,OAAOF,MAI1B,IAAMG,EAAc,uCAAG,WAAOC,GAAP,iBAAA3B,EAAA,yDACrB2B,EAAEC,iBADmB,WAGf1C,EAAWF,SAAWI,EAAUJ,SAAWM,GAH5B,wBAIbuC,EAAW,IAAIC,UACVC,OAAO,QAASJ,EAAEK,OAAOC,MAAMC,OACxCL,EAASE,OAAO,OAAQJ,EAAEK,OAAOG,KAAKD,OACtCL,EAASE,OAAO,QAASzC,GACzBmB,QAAQC,IAAIiB,EAAEK,OAAOC,MAAMC,MAAOP,EAAEK,OAAOG,KAAKD,MAAO5C,GAEvDG,GAAa,GAVI,UAYDkB,EAAS,CACvByB,OAAQ,OACRC,IAAK,SACL7B,KAAMqB,EACNP,QAAS,CACP,aAAc1C,EAAK2B,YACnB,eAAgB,yBAlBH,QAYbH,EAZa,OAsBjBuB,EAAEK,OAAOM,QACLlC,EAAII,OACN+B,OAAOC,SAASC,QAAhB,qBAAsCrC,EAAII,KAAKkC,MAC/CjD,GAAa,GACbE,GAAc,IA1BC,0DA8BnBc,QAAQC,IAAR,MACAjB,GAAa,GACbE,GAAc,GACc,MAAxB,KAAIgD,SAASC,OACf9C,EAAS,CAAEF,SAAS,EAAMX,IAAK,mBAE/Ba,EAAS,CAAEF,SAAS,EAAMX,IAAK,yBApCd,0DAAH,sDAyCpB,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAK4D,GAAI,EAAGC,GAAI,EAAGC,UAAU,uCAA7B,UACE,oBAAIA,UAAU,qCAAd,sBACA,eAAC,IAAD,CAAMC,SAAUtB,EAAhB,UACE,eAAC,IAAKuB,MAAN,CAAYF,UAAU,OAAtB,UACE,cAAC,IAAKG,MAAN,yBACA,cAAC,IAAKC,QAAN,CACE9C,KAAK,OACL+C,YAAY,cACZC,KAAK,QACLN,UArGK,WACjB,GAAI7D,EAAWH,QACb,OAAIG,EAAWF,QACN,wBACK,uBAiGOsE,GACXC,OA9Ie,SAAC5B,GAC5B,IAAI6B,EAAM7B,EAAEK,OAAOE,MAAMuB,OACrBC,EAAM,eAAQxE,GAClBwE,EAAO3E,SAAU,EACbyE,EAAIG,QAAU,GAChBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,sBACJuE,EAAIG,OAAS,GACtBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,yCACJuE,EAAIG,OAAS,KACtBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,4CAEbyE,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,IAEfE,EAAc,eAAKuE,KA8HPE,WAAS,IAEV1E,EAAWD,KACV,uBAAO8D,UAAU,kBAAjB,SAAoC7D,EAAWD,SAInD,eAAC,IAAKgE,MAAN,CACEF,UAAU,OACVc,UAAU,+BAFZ,UAIE,cAAC,IAAKX,MAAN,wBACA,cAAC,IAAKC,QAAN,CACEW,GAAG,WACHC,KAAM,EACNV,KAAK,OACLN,UA/GI,WAChB,GAAI3D,EAAUL,QACZ,OAAIK,EAAUJ,QACL,wBACK,uBA2GOgF,GACXC,SA5Ic,SAACtC,GAC3B,IAAI6B,EAAM7B,EAAEK,OAAOE,MAAMuB,OACrBC,EAAM,eAAQtE,GAClBsE,EAAO3E,SAAU,EACbyE,EAAIG,QAAU,GAChBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,qBACJuE,EAAIG,OAAS,GACtBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,wCACJuE,EAAIG,OAAS,KACtBD,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,6CAEbyE,EAAO1E,SAAU,EACjB0E,EAAOzE,IAAM,IAEfI,EAAa,eAAKqE,OA6HPtE,EAAUH,KACT,uBAAO8D,UAAU,kBAAjB,SAAoC3D,EAAUH,SAGlD,eAAC,IAAKgE,MAAN,CAAYY,UAAU,WAAWd,UAAU,OAA3C,UACE,cAAC,IAAKG,MAAN,yBACA,qBAAKH,UAAU,qCAAf,SACE,cAAC,IAAD,CAAKmB,GAAI,EAAGrB,GAAI,EAAhB,SACGvD,GACC,cAAC,IAAD,CAAO6E,IAAKC,IAAIC,gBAAgB/E,GAAQgF,WAAS,QAIvD,cAAC,IAAKnB,QAAN,CACE9C,KAAK,OACLgD,KAAK,QACLkB,OAAO,qEACPN,SAAU,SAACtC,GAAD,OAAOpC,EAASoC,EAAEK,OAAOwC,MAAM,UAG7C,cAAC,IAAD,CACEC,QAAQ,UACRpE,KAAK,SACL0C,UAAU,QACV2B,UAAWxF,EAAWF,UAAYI,EAAUJ,UAAYM,EAJ1D,SAMGE,EAAY,cAAgB,oBAGhCK,EAAMD,SACL,qBAAKmD,UAAU,sCAAf,SACGlD,EAAMZ,MAGVS,GACC,qBAAKqD,UAAU,uCAAf","file":"static/js/3.c9145a08.chunk.js","sourcesContent":["import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\nimport { useState, useContext } from \"react\";\nimport { Context } from \"../../context/Context\";\nimport { Button, Container, Form, Row, Col, Image } from \"react-bootstrap\";\n\nconst AddPost = (props) => {\n  // const [title, setTitle] = useState(\"\");\n  // const [body, setBody] = useState(\"\");\n\n  const { user, dispatch } = useContext(Context);\n\n  const [titleValid, setTitleValid] = useState({\n    touched: false,\n    isValid: false,\n    msg: \"\",\n  });\n\n  const [bodyValid, setBodyValid] = useState({\n    touched: false,\n    isValid: false,\n    msg: \"\",\n  });\n\n  const [image, setImage] = useState(null);\n\n  const [isLoading, setisLoading] = useState(false);\n\n  const [addSuccess, setaddSuccess] = useState(false);\n\n  const [error, setError] = useState({\n    isError: false,\n    msg: \"\",\n  });\n\n  const checkTitleValidation = (e) => {\n    let val = e.target.value.trim();\n    let valids = { ...titleValid };\n    valids.touched = true;\n    if (val.length <= 0) {\n      valids.isValid = false;\n      valids.msg = \"Title is required.\";\n    } else if (val.length < 3) {\n      valids.isValid = false;\n      valids.msg = \"Title must be more than 2 characters.\";\n    } else if (val.length > 255) {\n      valids.isValid = false;\n      valids.msg = \"Title must be less than 255 characters.\";\n    } else {\n      valids.isValid = true;\n      valids.msg = \"\";\n    }\n    setTitleValid({ ...valids });\n  };\n\n  const checkBodyValidation = (e) => {\n    let val = e.target.value.trim();\n    let valids = { ...bodyValid };\n    valids.touched = true;\n    if (val.length <= 0) {\n      valids.isValid = false;\n      valids.msg = \"Body is required.\";\n    } else if (val.length < 5) {\n      valids.isValid = false;\n      valids.msg = \"Body must be more than 4 characters.\";\n    } else if (val.length > 10000) {\n      valids.isValid = false;\n      valids.msg = \"Body must be less than 10000 characters.\";\n    } else {\n      valids.isValid = true;\n      valids.msg = \"\";\n    }\n    setBodyValid({ ...valids });\n  };\n\n  const titleStyle = () => {\n    if (titleValid.touched) {\n      if (titleValid.isValid) {\n        return \"border border-success\";\n      } else return \"border border-danger\";\n    }\n  };\n\n  const bodyStyle = () => {\n    if (bodyValid.touched) {\n      if (bodyValid.isValid) {\n        return \"border border-success\";\n      } else return \"border border-danger\";\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const res = await axios.post(\"/users/refresh-token\", {\n        token: user.refreshToken,\n      });\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: { ...user, accessToken: res.data.accessToken },\n      });\n      return res.data;\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const axiosJWT = axios.create();\n  //This will run before axios request to refresh token\n  axiosJWT.interceptors.request.use(\n    async (config) => {\n      let currentDate = new Date();\n      const decodedToken = jwt_decode(user.accessToken);\n      if (decodedToken.exp * 1000 < currentDate.getTime()) {\n        const data = await refreshToken();\n        config.headers[\"auth-token\"] = data.accessToken;\n      }\n      return config;\n    },\n    (err) => {\n      return Promise.reject(err);\n    }\n  );\n\n  const addPostHandler = async (e) => {\n    e.preventDefault();\n    try {\n      if (titleValid.isValid && bodyValid.isValid && image) {\n        let formData = new FormData();\n        formData.append(\"title\", e.target.title.value);\n        formData.append(\"body\", e.target.body.value);\n        formData.append(\"image\", image);\n        console.log(e.target.title.value, e.target.body.value, image);\n\n        setisLoading(true);\n\n        let res = await axiosJWT({\n          method: \"post\",\n          url: \"/posts\",\n          data: formData,\n          headers: {\n            \"auth-token\": user.accessToken,\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n\n        e.target.reset();\n        if (res.data) {\n          window.location.replace(`/app/posts/${res.data._id}`);\n          setisLoading(false);\n          setaddSuccess(true);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n      setisLoading(false);\n      setaddSuccess(false);\n      if (err.response.status === 400) {\n        setError({ isError: true, msg: \"Invalid inputs\" });\n      } else {\n        setError({ isError: true, msg: \"Somthing went wrong!\" });\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Row>\n        <Col md={6} lg={4} className=\" mx-auto bg-light p-4 my-4 shadow-sm\">\n          <h2 className=\" text-center h4 m-3 text-secondary\">Add Post</h2>\n          <Form onSubmit={addPostHandler}>\n            <Form.Group className=\"mb-3\">\n              <Form.Label>Post title</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Title\"\n                name=\"title\"\n                className={titleStyle()}\n                onBlur={checkTitleValidation}\n                autoFocus\n              />\n              {titleValid.msg && (\n                <small className=\"text-danger p-1\">{titleValid.msg}</small>\n              )}\n            </Form.Group>\n\n            <Form.Group\n              className=\"mb-3\"\n              controlId=\"exampleForm.ControlTextarea1\"\n            >\n              <Form.Label>Post body</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={3}\n                name=\"body\"\n                className={bodyStyle()}\n                onChange={checkBodyValidation}\n              />\n              {bodyValid.msg && (\n                <small className=\"text-danger p-1\">{bodyValid.msg}</small>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"formFile\" className=\"mb-3\">\n              <Form.Label>Post image</Form.Label>\n              <div className=\"d-flex my-2 justify-content-center\">\n                <Col xs={6} md={4}>\n                  {image && (\n                    <Image src={URL.createObjectURL(image)} thumbnail />\n                  )}\n                </Col>\n              </div>\n              <Form.Control\n                type=\"file\"\n                name=\"image\"\n                accept=\"image/png, image/jpeg, image/jpg, image/JPG, image/svg, image/webp\"\n                onChange={(e) => setImage(e.target.files[0])}\n              />\n            </Form.Group>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              className=\"w-100\"\n              disabled={!titleValid.isValid || !bodyValid.isValid || !image}\n            >\n              {isLoading ? \"Loading ...\" : \"Add New Post\"}\n            </Button>\n          </Form>\n          {error.isError && (\n            <div className=\"alert alert-danger text-center my-2\">\n              {error.msg}\n            </div>\n          )}\n          {addSuccess && (\n            <div className=\"alert alert-success text-center my-2\">\n              Post Added Successfully\n            </div>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddPost;\n"],"sourceRoot":""}